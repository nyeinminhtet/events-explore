# üìã WORKFLOW NAME
# This appears in the GitHub Actions tab and helps identify what this workflow does
name: Tests

# üöÄ TRIGGER CONDITIONS
# Defines when this workflow should run automatically
on:
  # Run on pushes to main and develop branches
  push:
    branches: [main, develop]
  # Run on pull requests targeting main branch
  pull_request:
    branches: [main]

# üíº JOBS DEFINITION
# A workflow can have multiple jobs that run in parallel or sequence
jobs:
  # Job name - you can have multiple jobs like 'test', 'build', 'deploy'
  test:
    # üñ•Ô∏è RUNNER ENVIRONMENT
    # Specifies what operating system to run the job on
    runs-on: ubuntu-latest

    # üîÑ MATRIX STRATEGY
    # Allows running the same job with different configurations
    strategy:
      matrix:
        # Test on multiple Node.js versions to ensure compatibility
        node-version: [18.x, 20.x]
        # You could also add other matrix dimensions like:
        # os: [ubuntu-latest, windows-latest, macos-latest]
        # package-manager: [npm, yarn, pnpm]

    # üìù STEP-BY-STEP EXECUTION
    # Each step runs sequentially within the job
    steps:
      # STEP 1: Get the code
      - name: Checkout repository
        uses: actions/checkout@v4
        # This downloads your repository code to the runner
        # @v4 is the version of the checkout action (always use latest stable)

      # STEP 2: Setup Node.js environment
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          # Use the Node version from our matrix strategy
          node-version: ${{ matrix.node-version }}
          # Enable caching for faster subsequent runs
          cache: "npm"
          # You could also use 'yarn' or 'pnpm' here

      # STEP 3: Install dependencies
      - name: Install dependencies
        run: npm ci
        # npm ci is faster and more reliable than npm install for CI
        # It installs directly from package-lock.json

      # STEP 4: Code quality checks
      - name: Run linter
        run: npm run lint
        # Runs ESLint to check code quality and style
        # Fails the workflow if linting errors are found

      # STEP 5: Type checking
      - name: Run type check
        run: npx tsc --noEmit
        # Runs TypeScript compiler to check for type errors
        # --noEmit means it only checks types, doesn't generate files

      # STEP 6: Run tests
      - name: Run tests
        run: npm run test:run
        # Runs all tests in CI mode (non-interactive)
        # Uses Vitest with coverage reporting

      # STEP 7: Upload test coverage
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          # Path to the coverage file generated by Vitest
          file: ./coverage/lcov.info
          # Flags help organize coverage reports
          flags: unittests
          # Name for this coverage upload
          name: codecov-umbrella
        # This step only runs if previous steps succeeded
